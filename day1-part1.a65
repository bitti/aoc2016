#include  "c64def.def"

#define   Tout(a)   .(:lda #<a:ldy #>a:jsr Txtout:.)
#define   Dout(a)   .(:lda #<a:ldy #>a:jsr Dgtout:.)
#define   Dinc(a)   .(:lda #<a:sta P1:lda #>a:sta P1+1:jsr increment:.)
#define   Dcompl(a) .(:lda #<a:sta P1:lda #>a:sta P1+1:jsr complement:.)
#define   Dneg(a)   .(:lda #<a:sta P1:lda #>a:sta P1+1:jsr neg:.)
#define   Dabs(a)   .(:lda #<a:sta P1:lda #>a:sta P1+1:jsr abs:.)
#define   Dadd(a,b) .( :\
          lda #<a      :\
          sta P1       :\
          lda #>a      :\
          sta P1+1     :\
          lda #<b      :\
          sta P2       :\
          lda #>b      :\
          sta P2+1     :\
          jsr add      :\
          .)

          .word $0801
          *=$0801

          .word basicend, 10
          .byt $9e, "2064", 0   ;sys $0810
basicend  .word 0
          .byt 0, 0, 0

          .(
          lda #<input
	  sta P1
	  lda #>input
	  sta P1+1
          ldy #0
nextdir   lda (P1), y
          cmp #" "              ; Skip whitespace
          bne rp
          iny
          bne nextdir
          inc P1+1
          jmp nextdir
rp        cmp #"R"              ; Right?
          bne left
          inc dir               ; Right
          jmp parse_steps
left      dec dir               ; Otherwise Left

parse_steps
          ldx #0
nextchar  iny
          bne c1
          inc P1+1
c1	  lda (P1), y
	  bne l1
          jmp endinput
l1	  cmp #","
	  beq nextrec
          sec
	  sbc #"0"
	  sta steps+1, x
	  inx
	  bne nextchar
	  jmp overflow
nextrec   jsr addnum
          iny
          bne nextdir
          inc P1+1
          jmp nextdir
endinput  jsr addnum
          Dneg(sumnorth)
          Dadd(sumnorth, sumsouth)
          Dabs(sumsouth)
          Dneg(sumwest)
          Dadd(sumwest, sumeast)
          Dabs(sumeast)
          Dadd(sumsouth, sumeast)
          Dout(sumeast)
          rts

addnum    .(
          stx steps
          lda #<sumnorth        ; Prepare second summand by (sumnorth+8*direction)
          sta P2
          lda #>sumnorth
          sta P2+1
          lda dir
          and #3
          asl
          asl
          asl
          clc
          adc P2
          sta P2
          bcc c2
          inc P2+1
c2        tya
          pha
          lda P1                ; Keep pointer to input
          pha
          lda P1+1
          pha

          lda #<steps
          sta P1
          lda #>steps
          sta P1+1
          jsr add
          pla                   ; Restore input pointer
          sta P1+1
          pla
          sta P1
          pla
          tay
          rts
          .)

;; Current direction
dir       .byt 0

;; Some decimals (see decimals.a65)
steps     .byt 7,0,0,0,0,0,0,0
sumnorth  .byt 7,0,0,0,0,0,0,0
sumeast	  .byt 7,0,0,0,0,0,0,0
sumsouth  .byt 7,0,0,0,0,0,0,0
sumwest	  .byt 7,0,0,0,0,0,0,0

plus      .asc " +", TC_CR, 0
equals    .asc " =", TC_CR, 0
cr        .asc TC_CR, 0
comma     .asc ", ", 0

input
#include "day1-input.a65"
          .)

#include "decimals.a65"
#include "io.a65"
